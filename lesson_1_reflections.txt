How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    Viewing a diff highlights only the rows with differences in order to help finding the bug.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    You can view the differences between file versions and retrieve old versions if you must undo some functionalities.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Manually choosing when to create a commit is more error-prone, and user could forget to commit for a long time.
    Otherwise, it is more flexible and allows user to merge together modifications that are logically related 
    (for example one commit for a new added function, one commit for some typos in a file, ecc).

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Git is oriented to code, and it is useful to save multiple files in one commit if it logically 
    involves more files.

How can you use the commands git log and git diff to view the history of files?

    Use git log to view all commits history, with time, ids and comment. 
    Use git diff with two commit ids to view differences between two versions.

How might using version control make you more confident to make changes that
could break something?

    You can always revert code to older versions in order to check which commit caused a bug (using diff function), 
    then you can return to the head version.

Now that you have your workspace set up, what do you want to try using Git for?

    I want to try use Git as a version control for my projects